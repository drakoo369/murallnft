// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ArtworkFilled extends ethereum.Event {
  get params(): ArtworkFilled__Params {
    return new ArtworkFilled__Params(this);
  }
}

export class ArtworkFilled__Params {
  _event: ArtworkFilled;

  constructor(event: ArtworkFilled) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get finished(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class NewMetadataEncoderSet extends ethereum.Event {
  get params(): NewMetadataEncoderSet__Params {
    return new NewMetadataEncoderSet__Params(this);
  }
}

export class NewMetadataEncoderSet__Params {
  _event: NewMetadataEncoderSet;

  constructor(event: NewMetadataEncoderSet) {
    this._event = event;
  }

  get metadataEncoder(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferWithMetadata extends ethereum.Event {
  get params(): TransferWithMetadata__Params {
    return new TransferWithMetadata__Params(this);
  }
}

export class TransferWithMetadata__Params {
  _event: TransferWithMetadata;

  constructor(event: TransferWithMetadata) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get metaData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class MurAllNFT__getArtworkFillCompletionStatusResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getColorIndexLength(): BigInt {
    return this.value0;
  }

  getIndividualPixelsLength(): BigInt {
    return this.value1;
  }

  getPixelGroupsLength(): BigInt {
    return this.value2;
  }

  getPixelGroupIndexesLength(): BigInt {
    return this.value3;
  }

  getTransparentPixelGroupsLength(): BigInt {
    return this.value4;
  }

  getTransparentPixelGroupIndexesLength(): BigInt {
    return this.value5;
  }
}

export class MurAllNFT__getArtworkForIdResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;
  value4: Array<BigInt>;
  value5: Array<BigInt>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>,
    value4: Array<BigInt>,
    value5: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigIntArray(this.value5));
    return map;
  }

  getColorIndex(): Array<BigInt> {
    return this.value0;
  }

  getIndividualPixels(): Array<BigInt> {
    return this.value1;
  }

  getPixelGroups(): Array<BigInt> {
    return this.value2;
  }

  getPixelGroupIndexes(): Array<BigInt> {
    return this.value3;
  }

  getTransparentPixelGroups(): Array<BigInt> {
    return this.value4;
  }

  getTransparentPixelGroupIndexes(): Array<BigInt> {
    return this.value5;
  }
}

export class MurAllNFT__getFullDataForIdResult {
  value0: Address;
  value1: Array<BigInt>;
  value2: Array<BigInt>;
  value3: Array<BigInt>;
  value4: Array<BigInt>;
  value5: Array<BigInt>;
  value6: Array<BigInt>;
  value7: Array<BigInt>;

  constructor(
    value0: Address,
    value1: Array<BigInt>,
    value2: Array<BigInt>,
    value3: Array<BigInt>,
    value4: Array<BigInt>,
    value5: Array<BigInt>,
    value6: Array<BigInt>,
    value7: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigIntArray(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigIntArray(this.value7));
    return map;
  }

  getArtist(): Address {
    return this.value0;
  }

  getColorIndex(): Array<BigInt> {
    return this.value1;
  }

  getIndividualPixels(): Array<BigInt> {
    return this.value2;
  }

  getPixelGroups(): Array<BigInt> {
    return this.value3;
  }

  getPixelGroupIndexes(): Array<BigInt> {
    return this.value4;
  }

  getTransparentPixelGroups(): Array<BigInt> {
    return this.value5;
  }

  getTransparentPixelGroupIndexes(): Array<BigInt> {
    return this.value6;
  }

  getMetadata(): Array<BigInt> {
    return this.value7;
  }
}

export class MurAllNFT extends ethereum.SmartContract {
  static bind(address: Address): MurAllNFT {
    return new MurAllNFT("MurAllNFT", address);
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  childChainManagerProxy(): Address {
    let result = super.call(
      "childChainManagerProxy",
      "childChainManagerProxy():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_childChainManagerProxy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "childChainManagerProxy",
      "childChainManagerProxy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  encodeTokenMetadata(tokenId: BigInt): Bytes {
    let result = super.call(
      "encodeTokenMetadata",
      "encodeTokenMetadata(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBytes();
  }

  try_encodeTokenMetadata(tokenId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "encodeTokenMetadata",
      "encodeTokenMetadata(uint256):(bytes)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAlphaChannel(id: BigInt): BigInt {
    let result = super.call(
      "getAlphaChannel",
      "getAlphaChannel(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_getAlphaChannel(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAlphaChannel",
      "getAlphaChannel(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getArtist(id: BigInt): Address {
    let result = super.call("getArtist", "getArtist(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toAddress();
  }

  try_getArtist(id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getArtist", "getArtist(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getArtworkDataHashForId(id: BigInt): Bytes {
    let result = super.call(
      "getArtworkDataHashForId",
      "getArtworkDataHashForId(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBytes();
  }

  try_getArtworkDataHashForId(id: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getArtworkDataHashForId",
      "getArtworkDataHashForId(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getArtworkFillCompletionStatus(
    id: BigInt
  ): MurAllNFT__getArtworkFillCompletionStatusResult {
    let result = super.call(
      "getArtworkFillCompletionStatus",
      "getArtworkFillCompletionStatus(uint256):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return new MurAllNFT__getArtworkFillCompletionStatusResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getArtworkFillCompletionStatus(
    id: BigInt
  ): ethereum.CallResult<MurAllNFT__getArtworkFillCompletionStatusResult> {
    let result = super.tryCall(
      "getArtworkFillCompletionStatus",
      "getArtworkFillCompletionStatus(uint256):(uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MurAllNFT__getArtworkFillCompletionStatusResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  getArtworkForId(id: BigInt): MurAllNFT__getArtworkForIdResult {
    let result = super.call(
      "getArtworkForId",
      "getArtworkForId(uint256):(uint256[],uint256[],uint256[],uint256[],uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return new MurAllNFT__getArtworkForIdResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray(),
      result[4].toBigIntArray(),
      result[5].toBigIntArray()
    );
  }

  try_getArtworkForId(
    id: BigInt
  ): ethereum.CallResult<MurAllNFT__getArtworkForIdResult> {
    let result = super.tryCall(
      "getArtworkForId",
      "getArtworkForId(uint256):(uint256[],uint256[],uint256[],uint256[],uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MurAllNFT__getArtworkForIdResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray(),
        value[4].toBigIntArray(),
        value[5].toBigIntArray()
      )
    );
  }

  getFullDataForId(id: BigInt): MurAllNFT__getFullDataForIdResult {
    let result = super.call(
      "getFullDataForId",
      "getFullDataForId(uint256):(address,uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[2])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return new MurAllNFT__getFullDataForIdResult(
      result[0].toAddress(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray(),
      result[4].toBigIntArray(),
      result[5].toBigIntArray(),
      result[6].toBigIntArray(),
      result[7].toBigIntArray()
    );
  }

  try_getFullDataForId(
    id: BigInt
  ): ethereum.CallResult<MurAllNFT__getFullDataForIdResult> {
    let result = super.tryCall(
      "getFullDataForId",
      "getFullDataForId(uint256):(address,uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[2])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MurAllNFT__getFullDataForIdResult(
        value[0].toAddress(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray(),
        value[4].toBigIntArray(),
        value[5].toBigIntArray(),
        value[6].toBigIntArray(),
        value[7].toBigIntArray()
      )
    );
  }

  getName(id: BigInt): string {
    let result = super.call("getName", "getName(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toString();
  }

  try_getName(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getName", "getName(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getNumber(id: BigInt): BigInt {
    let result = super.call("getNumber", "getNumber(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_getNumber(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNumber", "getNumber(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSeriesId(id: BigInt): BigInt {
    let result = super.call("getSeriesId", "getSeriesId(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_getSeriesId(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSeriesId",
      "getSeriesId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalArtworks(): BigInt {
    let result = super.call(
      "getTotalArtworks",
      "getTotalArtworks():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalArtworks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalArtworks",
      "getTotalArtworks():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasAlphaChannel(id: BigInt): boolean {
    let result = super.call(
      "hasAlphaChannel",
      "hasAlphaChannel(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBoolean();
  }

  try_hasAlphaChannel(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasAlphaChannel",
      "hasAlphaChannel(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isArtworkFilled(id: BigInt): boolean {
    let result = super.call(
      "isArtworkFilled",
      "isArtworkFilled(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBoolean();
  }

  try_isArtworkFilled(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isArtworkFilled",
      "isArtworkFilled(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mediaURI(_tokenId: BigInt): string {
    let result = super.call("mediaURI", "mediaURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_mediaURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("mediaURI", "mediaURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  mint(
    origin: Address,
    colorIndex: Array<BigInt>,
    individualPixels: Array<BigInt>,
    pixelGroups: Array<BigInt>,
    pixelGroupIndexes: Array<BigInt>,
    transparentPixelGroups: Array<BigInt>,
    transparentPixelGroupIndexes: Array<BigInt>,
    metadata: Array<BigInt>
  ): BigInt {
    let result = super.call(
      "mint",
      "mint(address,uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[2]):(uint256)",
      [
        ethereum.Value.fromAddress(origin),
        ethereum.Value.fromUnsignedBigIntArray(colorIndex),
        ethereum.Value.fromUnsignedBigIntArray(individualPixels),
        ethereum.Value.fromUnsignedBigIntArray(pixelGroups),
        ethereum.Value.fromUnsignedBigIntArray(pixelGroupIndexes),
        ethereum.Value.fromUnsignedBigIntArray(transparentPixelGroups),
        ethereum.Value.fromUnsignedBigIntArray(transparentPixelGroupIndexes),
        ethereum.Value.fromUnsignedBigIntArray(metadata)
      ]
    );

    return result[0].toBigInt();
  }

  try_mint(
    origin: Address,
    colorIndex: Array<BigInt>,
    individualPixels: Array<BigInt>,
    pixelGroups: Array<BigInt>,
    pixelGroupIndexes: Array<BigInt>,
    transparentPixelGroups: Array<BigInt>,
    transparentPixelGroupIndexes: Array<BigInt>,
    metadata: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mint",
      "mint(address,uint256[],uint256[],uint256[],uint256[],uint256[],uint256[],uint256[2]):(uint256)",
      [
        ethereum.Value.fromAddress(origin),
        ethereum.Value.fromUnsignedBigIntArray(colorIndex),
        ethereum.Value.fromUnsignedBigIntArray(individualPixels),
        ethereum.Value.fromUnsignedBigIntArray(pixelGroups),
        ethereum.Value.fromUnsignedBigIntArray(pixelGroupIndexes),
        ethereum.Value.fromUnsignedBigIntArray(transparentPixelGroups),
        ethereum.Value.fromUnsignedBigIntArray(transparentPixelGroupIndexes),
        ethereum.Value.fromUnsignedBigIntArray(metadata)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewURI(_tokenId: BigInt): string {
    let result = super.call("viewURI", "viewURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_viewURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("viewURI", "viewURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  withdrawnTokens(param0: BigInt): boolean {
    let result = super.call(
      "withdrawnTokens",
      "withdrawnTokens(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_withdrawnTokens(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawnTokens",
      "withdrawnTokens(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _childChainManagerProxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get admins(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _nftImageDataStorageAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _nftDataStorageAddr(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _metadataEncoderAddr(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get depositData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class FillDataCall extends ethereum.Call {
  get inputs(): FillDataCall__Inputs {
    return new FillDataCall__Inputs(this);
  }

  get outputs(): FillDataCall__Outputs {
    return new FillDataCall__Outputs(this);
  }
}

export class FillDataCall__Inputs {
  _call: FillDataCall;

  constructor(call: FillDataCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get colorIndex(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get individualPixels(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get pixelGroups(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get pixelGroupIndexes(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get transparentPixelGroups(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get transparentPixelGroupIndexes(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }
}

export class FillDataCall__Outputs {
  _call: FillDataCall;

  constructor(call: FillDataCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get origin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get colorIndex(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get individualPixels(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get pixelGroups(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get pixelGroupIndexes(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get transparentPixelGroups(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get transparentPixelGroupIndexes(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get metadata(): Array<BigInt> {
    return this._call.inputValues[7].value.toBigIntArray();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetMediaUriBaseCall extends ethereum.Call {
  get inputs(): SetMediaUriBaseCall__Inputs {
    return new SetMediaUriBaseCall__Inputs(this);
  }

  get outputs(): SetMediaUriBaseCall__Outputs {
    return new SetMediaUriBaseCall__Outputs(this);
  }
}

export class SetMediaUriBaseCall__Inputs {
  _call: SetMediaUriBaseCall;

  constructor(call: SetMediaUriBaseCall) {
    this._call = call;
  }

  get _mediaUriBase(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetMediaUriBaseCall__Outputs {
  _call: SetMediaUriBaseCall;

  constructor(call: SetMediaUriBaseCall) {
    this._call = call;
  }
}

export class SetMetadataEncoderCall extends ethereum.Call {
  get inputs(): SetMetadataEncoderCall__Inputs {
    return new SetMetadataEncoderCall__Inputs(this);
  }

  get outputs(): SetMetadataEncoderCall__Outputs {
    return new SetMetadataEncoderCall__Outputs(this);
  }
}

export class SetMetadataEncoderCall__Inputs {
  _call: SetMetadataEncoderCall;

  constructor(call: SetMetadataEncoderCall) {
    this._call = call;
  }

  get newMetadataEncoder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMetadataEncoderCall__Outputs {
  _call: SetMetadataEncoderCall;

  constructor(call: SetMetadataEncoderCall) {
    this._call = call;
  }
}

export class SetTokenUriBaseCall extends ethereum.Call {
  get inputs(): SetTokenUriBaseCall__Inputs {
    return new SetTokenUriBaseCall__Inputs(this);
  }

  get outputs(): SetTokenUriBaseCall__Outputs {
    return new SetTokenUriBaseCall__Outputs(this);
  }
}

export class SetTokenUriBaseCall__Inputs {
  _call: SetTokenUriBaseCall;

  constructor(call: SetTokenUriBaseCall) {
    this._call = call;
  }

  get _tokenUriBase(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetTokenUriBaseCall__Outputs {
  _call: SetTokenUriBaseCall;

  constructor(call: SetTokenUriBaseCall) {
    this._call = call;
  }
}

export class SetViewUriBaseCall extends ethereum.Call {
  get inputs(): SetViewUriBaseCall__Inputs {
    return new SetViewUriBaseCall__Inputs(this);
  }

  get outputs(): SetViewUriBaseCall__Outputs {
    return new SetViewUriBaseCall__Outputs(this);
  }
}

export class SetViewUriBaseCall__Inputs {
  _call: SetViewUriBaseCall;

  constructor(call: SetViewUriBaseCall) {
    this._call = call;
  }

  get _viewUriBase(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetViewUriBaseCall__Outputs {
  _call: SetViewUriBaseCall;

  constructor(call: SetViewUriBaseCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateChildChainManagerCall extends ethereum.Call {
  get inputs(): UpdateChildChainManagerCall__Inputs {
    return new UpdateChildChainManagerCall__Inputs(this);
  }

  get outputs(): UpdateChildChainManagerCall__Outputs {
    return new UpdateChildChainManagerCall__Outputs(this);
  }
}

export class UpdateChildChainManagerCall__Inputs {
  _call: UpdateChildChainManagerCall;

  constructor(call: UpdateChildChainManagerCall) {
    this._call = call;
  }

  get newChildChainManagerProxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateChildChainManagerCall__Outputs {
  _call: UpdateChildChainManagerCall;

  constructor(call: UpdateChildChainManagerCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawWithMetadataCall extends ethereum.Call {
  get inputs(): WithdrawWithMetadataCall__Inputs {
    return new WithdrawWithMetadataCall__Inputs(this);
  }

  get outputs(): WithdrawWithMetadataCall__Outputs {
    return new WithdrawWithMetadataCall__Outputs(this);
  }
}

export class WithdrawWithMetadataCall__Inputs {
  _call: WithdrawWithMetadataCall;

  constructor(call: WithdrawWithMetadataCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawWithMetadataCall__Outputs {
  _call: WithdrawWithMetadataCall;

  constructor(call: WithdrawWithMetadataCall) {
    this._call = call;
  }
}
